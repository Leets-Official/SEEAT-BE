plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.seeat'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


jacoco {
    toolVersion = "0.8.9"
}

test {
    finalizedBy jacocoTestReport
}


jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = false
        html.required = true

        xml.destination file("${buildDir}/jacoco/index.xml")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }
    afterEvaluate {

        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            "com/seeat/server/global/**",
                            "**/*Dto*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/*Application*",
                            "**/*Exception*"
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}


jacocoTestCoverageVerification {

    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                //minimum = 0.90
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                //minimum = 0.90
            }
            excludes = ["com/seeat/server/global/**",
                        "**/*Dto*",
                        "**/*Request*",
                        "**/*Response*",
                        "**/*Interceptor*",
                        "**/*Application*",
                        "**/*Mapper*",
                        "**/*Exception*"
            ] + Qdomains
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // 기본 의존성
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // DB 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'com.h2database:h2'

    // 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //Oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // OCR
    implementation("com.googlecode.json-simple:json-simple:1.1.1")

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // 테스트 관련 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
